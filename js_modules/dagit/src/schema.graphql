type CompositeConfigType implements ConfigType {
  key: String!
  name: String
  description: String
  innerTypes: [ConfigType!]!
  isNullable: Boolean!
  isList: Boolean!
  isSelector: Boolean!
  isBuiltin: Boolean!
  isSystemGenerated: Boolean!
  fields: [ConfigTypeField!]!
}

type CompositeSolidDefinition implements ISolidDefinition & SolidContainer {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  solids: [Solid!]!
  inputMappings: [InputMapping!]!
  outputMappings: [OutputMapping!]!
}

interface ConfigType {
  key: String!
  name: String
  description: String
  innerTypes: [ConfigType!]!
  isNullable: Boolean!
  isList: Boolean!
  isSelector: Boolean!
  isBuiltin: Boolean!
  isSystemGenerated: Boolean!
}

type ConfigTypeField {
  name: String!
  description: String
  configType: ConfigType!
  defaultValue: String
  isOptional: Boolean!
  isSecret: Boolean!
}

type ConfigTypeNotFoundError implements Error {
  message: String!
  stack: [String!]!
  pipeline: Pipeline!
  configTypeName: String!
}

union ConfigTypeOrError = EnumConfigType | CompositeConfigType | RegularConfigType | PipelineNotFoundError | ConfigTypeNotFoundError

scalar Cursor

type EnumConfigType implements ConfigType {
  key: String!
  name: String
  description: String
  innerTypes: [ConfigType!]!
  isNullable: Boolean!
  isList: Boolean!
  isSelector: Boolean!
  isBuiltin: Boolean!
  isSystemGenerated: Boolean!
  values: [EnumConfigValue!]!
}

type EnumConfigValue {
  value: String!
  description: String
}

scalar EnvironmentConfigData

type EnvironmentSchema {
  environmentType: ConfigType!
  configTypes: [ConfigType!]!
  configTypeOrError(configTypeName: String!): ConfigTypeOrError!
  isEnvironmentConfigValid(environmentConfigData: EnvironmentConfigData): PipelineConfigValidationResult!
}

union EnvironmentSchemaOrError = EnvironmentSchema | PipelineNotFoundError | SolidNotFoundError | ModeNotFoundError

interface Error {
  message: String!
  stack: [String!]!
}

enum EvaluationErrorReason {
  RUNTIME_TYPE_MISMATCH
  MISSING_REQUIRED_FIELD
  MISSING_REQUIRED_FIELDS
  FIELD_NOT_DEFINED
  FIELDS_NOT_DEFINED
  SELECTOR_FIELD_ERROR
}

type EvaluationStack {
  entries: [EvaluationStackEntry!]!
}

union EvaluationStackEntry = EvaluationStackListItemEntry | EvaluationStackPathEntry

type EvaluationStackListItemEntry {
  listIndex: Int!
}

type EvaluationStackPathEntry {
  field: ConfigTypeField!
}

union ExecutePlanResult = ExecutePlanSuccess | PipelineConfigValidationInvalid | PipelineNotFoundError | InvalidStepError | PythonError

type ExecutePlanSuccess {
  pipeline: Pipeline!
  hasFailures: Boolean!
  stepEvents: [StepEvent!]!
}

input ExecutionMetadata {
  runId: String
  tags: [ExecutionTag!]
}

input ExecutionParams {
  selector: ExecutionSelector!
  environmentConfigData: EnvironmentConfigData
  mode: String!
  executionMetadata: ExecutionMetadata
  stepKeys: [String!]
}

type ExecutionPlan {
  steps: [ExecutionStep!]!
  pipeline: Pipeline!
  artifactsPersisted: Boolean!
}

union ExecutionPlanResult = ExecutionPlan | PipelineConfigValidationInvalid | PipelineNotFoundError

input ExecutionSelector {
  name: String!
  solidSubset: [String!]
}

type ExecutionStep {
  key: String!
  inputs: [ExecutionStepInput!]!
  outputs: [ExecutionStepOutput!]!
  solidHandleID: String!
  kind: StepKind!
  metadata: [MetadataItemDefinition!]!
}

type ExecutionStepFailureEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  error: PythonError!
}

type ExecutionStepInput {
  name: String!
  type: RuntimeType!
  dependsOn: ExecutionStep!
}

type ExecutionStepOutput {
  name: String!
  type: RuntimeType!
}

type ExecutionStepOutputEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  outputName: String!
  valueRepr: String!
  intermediateMaterialization: Materialization
}

type ExecutionStepSkippedEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type ExecutionStepStartEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type ExecutionStepSuccessEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

input ExecutionTag {
  key: String!
  value: String!
}

type Expectation {
  name: String!
  description: String
}

type ExpectationResult {
  success: Boolean!
  name: String
  message: String
  resultMetadataJsonString: String
}

type FieldNotDefinedConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fieldName: String!
}

type FieldsNotDefinedConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fieldNames: [String!]!
}

type Input {
  solid: Solid!
  definition: InputDefinition!
  dependsOn: [Output!]!
}

type InputDefinition {
  solidDefinition: SolidDefinition!
  name: String!
  description: String
  type: RuntimeType!
  expectations: [Expectation!]!
}

type InputMapping {
  mappedInput: Input!
  definition: InputDefinition!
}

type InvalidDefinitionError implements Error {
  message: String!
  stack: [String!]!
}

type InvalidOutputError {
  stepKey: String!
  invalidOutputName: String!
}

type InvalidStepError {
  invalidStepKey: String!
}

interface ISolidDefinition {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
}

type ListConfigType implements ConfigType & WrappingConfigType {
  key: String!
  name: String
  description: String
  innerTypes: [ConfigType!]!
  isNullable: Boolean!
  isList: Boolean!
  isSelector: Boolean!
  isBuiltin: Boolean!
  isSystemGenerated: Boolean!
  ofType: ConfigType!
}

type ListRuntimeType implements RuntimeType & WrappingRuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
  ofType: RuntimeType!
}

type Logger {
  name: String!
  description: String
  configField: ConfigTypeField
}

enum LogLevel {
  CRITICAL
  ERROR
  INFO
  WARNING
  DEBUG
}

type LogMessageConnection {
  nodes: [PipelineRunEvent!]!
  pageInfo: PageInfo!
}

type LogMessageEvent implements MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type Materialization {
  description: String
  path: String
}

interface MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type MetadataItemDefinition {
  key: String!
  value: String!
}

type MissingFieldConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  field: ConfigTypeField!
}

type MissingFieldsConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fields: [ConfigTypeField!]!
}

type MissingRunIdErrorEvent {
  invalidRunId: String!
}

type Mode {
  name: String!
  description: String
  resources: [Resource!]!
  loggers: [Logger!]!
}

type ModeNotFoundError implements Error {
  message: String!
  stack: [String!]!
  mode: String!
}

type Mutation {
  startPipelineExecution(executionParams: ExecutionParams!, reexecutionConfig: ReexecutionConfig): StartPipelineExecutionResult!
  executePlan(executionParams: ExecutionParams!): ExecutePlanResult!
}

type NullableConfigType implements ConfigType & WrappingConfigType {
  key: String!
  name: String
  description: String
  innerTypes: [ConfigType!]!
  isNullable: Boolean!
  isList: Boolean!
  isSelector: Boolean!
  isBuiltin: Boolean!
  isSystemGenerated: Boolean!
  ofType: ConfigType!
}

type NullableRuntimeType implements RuntimeType & WrappingRuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
  ofType: RuntimeType!
}

type Output {
  solid: Solid!
  definition: OutputDefinition!
  dependedBy: [Input!]!
}

type OutputDefinition {
  solidDefinition: SolidDefinition!
  name: String!
  description: String
  type: RuntimeType!
  expectations: [Expectation!]!
}

type OutputMapping {
  mappedOutput: Output!
  definition: OutputDefinition!
}

type PageInfo {
  lastCursor: Cursor
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  count: Int!
  totalCount: Int!
}

type Pipeline implements SolidContainer {
  solids: [Solid!]!
  name: String!
  description: String
  environmentType(mode: String): ConfigType!
  configTypes(mode: String): [ConfigType!]!
  runtimeTypes: [RuntimeType!]!
  runs: [PipelineRun!]!
  modes: [Mode!]!
  solidHandles: [SolidHandle!]!
  presets: [PipelinePreset!]!
}

interface PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
}

type PipelineConfigValidationInvalid {
  pipeline: Pipeline!
  errors: [PipelineConfigValidationError!]!
}

union PipelineConfigValidationResult = PipelineConfigValidationValid | PipelineConfigValidationInvalid | PipelineNotFoundError

type PipelineConfigValidationValid {
  pipeline: Pipeline!
}

type PipelineConnection {
  nodes: [Pipeline!]!
}

interface PipelineEvent {
  pipeline: Pipeline!
}

type PipelineFailureEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PipelineInitFailureEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
  error: PythonError!
}

type PipelineNotFoundError implements Error {
  message: String!
  stack: [String!]!
  pipelineName: String!
}

union PipelineOrError = Pipeline | PythonError | PipelineNotFoundError | SolidNotFoundError

type PipelinePreset {
  name: String!
  solidSubset: [String!]
  environmentConfigYaml: String!
  mode: String!
}

type PipelineProcessStartedEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
  processId: Int!
}

type PipelineProcessStartEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PipelineRun {
  runId: String!
  status: PipelineRunStatus!
  pipeline: Pipeline!
  logs: LogMessageConnection!
  executionPlan: ExecutionPlan!
  environmentConfigYaml: String!
  mode: String!
}

union PipelineRunEvent = LogMessageEvent | PipelineStartEvent | PipelineSuccessEvent | PipelineFailureEvent | PipelineInitFailureEvent | ExecutionStepStartEvent | ExecutionStepSuccessEvent | ExecutionStepOutputEvent | ExecutionStepFailureEvent | ExecutionStepSkippedEvent | PipelineProcessStartEvent | PipelineProcessStartedEvent | StepMaterializationEvent | StepExpectationResultEvent

type PipelineRunLogsSubscriptionMissingRunIdFailure {
  missingRunId: String!
}

union PipelineRunLogsSubscriptionPayload = PipelineRunLogsSubscriptionSuccess | PipelineRunLogsSubscriptionMissingRunIdFailure

type PipelineRunLogsSubscriptionSuccess {
  runId: String!
  messages: [PipelineRunEvent!]!
}

type PipelineRunNotFoundError implements Error {
  message: String!
  stack: [String!]!
  runId: String!
}

union PipelineRunOrError = PipelineRun | PipelineRunNotFoundError

enum PipelineRunStatus {
  NOT_STARTED
  STARTED
  SUCCESS
  FAILURE
}

union PipelinesOrError = PipelineConnection | PythonError | InvalidDefinitionError

type PipelineStartEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PipelineSuccessEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PythonError implements Error {
  message: String!
  stack: [String!]!
}

type Query {
  version: String!
  pipelineOrError(params: ExecutionSelector!): PipelineOrError!
  pipeline(params: ExecutionSelector!): Pipeline!
  pipelinesOrError: PipelinesOrError!
  pipelines: PipelineConnection!
  configTypeOrError(pipelineName: String!, configTypeName: String!, mode: String!): ConfigTypeOrError!
  runtimeTypeOrError(pipelineName: String!, runtimeTypeName: String!): RuntimeTypeOrError!
  pipelineRuns: [PipelineRun!]!
  pipelineRunOrError(runId: ID!): PipelineRunOrError!
  isPipelineConfigValid(pipeline: ExecutionSelector!, environmentConfigData: EnvironmentConfigData, mode: String!): PipelineConfigValidationResult!
  executionPlan(pipeline: ExecutionSelector!, environmentConfigData: EnvironmentConfigData, mode: String!): ExecutionPlanResult!
  environmentSchemaOrError(selector: ExecutionSelector!, mode: String!): EnvironmentSchemaOrError!
}

input ReexecutionConfig {
  previousRunId: String!
  stepOutputHandles: [StepOutputHandle!]!
}

type RegularConfigType implements ConfigType {
  key: String!
  name: String
  description: String
  innerTypes: [ConfigType!]!
  isNullable: Boolean!
  isList: Boolean!
  isSelector: Boolean!
  isBuiltin: Boolean!
  isSystemGenerated: Boolean!
}

type RegularRuntimeType implements RuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
}

type Resource {
  name: String!
  description: String
  configField: ConfigTypeField
}

type RuntimeMismatchConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  type: ConfigType!
  valueRep: String
}

interface RuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
}

type RuntimeTypeNotFoundError implements Error {
  message: String!
  stack: [String!]!
  pipeline: Pipeline!
  runtimeTypeName: String!
}

union RuntimeTypeOrError = RegularRuntimeType | PipelineNotFoundError | RuntimeTypeNotFoundError

type SelectorTypeConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  incomingFields: [String!]!
}

type Solid {
  name: String!
  definition: ISolidDefinition!
  inputs: [Input!]!
  outputs: [Output!]!
}

interface SolidContainer {
  solids: [Solid!]!
}

type SolidDefinition implements ISolidDefinition {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  configDefinition: ConfigTypeField
}

type SolidHandle {
  handleID: String!
  solid: Solid!
  parent: SolidHandle
}

type SolidNotFoundError implements Error {
  message: String!
  stack: [String!]!
  solidName: String!
}

union StartPipelineExecutionResult = InvalidStepError | InvalidOutputError | PipelineConfigValidationInvalid | PipelineNotFoundError | StartPipelineExecutionSuccess

type StartPipelineExecutionSuccess {
  run: PipelineRun!
}

interface StepEvent {
  step: ExecutionStep
}

type StepExpectationResultEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  expectationResult: ExpectationResult!
}

enum StepKind {
  COMPUTE
  INPUT_EXPECTATION
  OUTPUT_EXPECTATION
  JOIN
  SERIALIZE
  INPUT_THUNK
  MATERIALIZATION_THUNK
  UNMARSHAL_INPUT
  MARSHAL_OUTPUT
}

type StepMaterializationEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  materialization: Materialization!
}

input StepOutputHandle {
  stepKey: String!
  outputName: String!
}

type Subscription {
  pipelineRunLogs(runId: ID!, after: Cursor): PipelineRunLogsSubscriptionPayload!
}

interface WrappingConfigType {
  ofType: ConfigType!
}

interface WrappingRuntimeType {
  ofType: RuntimeType!
}
